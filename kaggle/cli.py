{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30673,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"\n#!/usr/bin/python\n#\n# Copyright 2023 Kaggle Inc\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n#!/usr/bin/python\n#\n# Copyright 2019 Kaggle Inc\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# coding=utf-8\nfrom __future__ import print_function\nimport argparse\nimport json\nfrom kaggle import api\nfrom kaggle import KaggleApi\nfrom .rest import ApiException\nimport six\n\n\ndef main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawTextHelpFormatter)\n\n    parser.add_argument(\n        '-v',\n        '--version',\n        action='version',\n        version='Kaggle API ' + KaggleApi.__version__)\n\n    subparsers = parser.add_subparsers(\n        title='commands', help=Help.kaggle, dest='command')\n    subparsers.required = True\n    subparsers.choices = Help.kaggle_choices\n    parse_competitions(subparsers)\n    parse_datasets(subparsers)\n    parse_kernels(subparsers)\n    # parse_models(subparsers)\n    parse_files(subparsers)\n    parse_config(subparsers)\n    args = parser.parse_args()\n    command_args = {}\n    command_args.update(vars(args))\n    del command_args['func']\n    del command_args['command']\n    error = False\n    try:\n        out = args.func(**command_args)\n    except ApiException as e:\n        msg = '{} - {}'.format(str(e.status), e.reason)\n        body = __parse_body(e.body)\n        if body and 'message' in body:\n            msg += ' - {}'.format(body['message'])\n        print(msg)\n        out = None\n        error = True\n    except ValueError as e:\n        print(e)\n        out = None\n        error = True\n    except KeyboardInterrupt:\n        print('User cancelled operation')\n        out = None\n    if out is not None:\n        print(out, end='')\n\n    # This is so that scripts that pick up on error codes can tell when there was a failure\n    if error:\n        exit(1)\n\n\ndef __parse_body(body):\n    try:\n        return json.loads(body)\n    except Exception as e:\n        return {}\n\n\ndef parse_competitions(subparsers):\n    if six.PY2:\n        parser_competitions = subparsers.add_parser(\n            'competitions',\n            formatter_class=argparse.RawTextHelpFormatter,\n            help=Help.group_competitions)\n    else:\n        parser_competitions = subparsers.add_parser(\n            'competitions',\n            formatter_class=argparse.RawTextHelpFormatter,\n            help=Help.group_competitions,\n            aliases=['c'])\n    subparsers_competitions = parser_competitions.add_subparsers(\n        title='commands', dest='command')\n    subparsers_competitions.required = True\n    subparsers_competitions.choices = Help.competitions_choices\n\n    # Competitions list\n    parser_competitions_list = subparsers_competitions.add_parser(\n        'list',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_competitions_list)\n    parser_competitions_list_optional = parser_competitions_list._action_groups.pop(\n    )\n    parser_competitions_list_optional.add_argument(\n        '--group',\n        dest='group',\n        required=False,\n        help=Help.param_competition_group)\n    parser_competitions_list_optional.add_argument(\n        '--category',\n        dest='category',\n        required=False,\n        help=Help.param_competition_category)\n    parser_competitions_list_optional.add_argument(\n        '--sort-by',\n        dest='sort_by',\n        required=False,\n        help=Help.param_competition_sort_by)\n    parser_competitions_list_optional.add_argument(\n        '-p',\n        '--page',\n        dest='page',\n        default=1,\n        required=False,\n        help=Help.param_page)\n    parser_competitions_list_optional.add_argument(\n        '-s',\n        '--search',\n        dest='search',\n        required=False,\n        help=Help.param_search)\n    parser_competitions_list_optional.add_argument(\n        '-v',\n        '--csv',\n        dest='csv_display',\n        action='store_true',\n        help=Help.param_csv)\n    parser_competitions_list._action_groups.append(\n        parser_competitions_list_optional)\n    parser_competitions_list.set_defaults(func=api.competitions_list_cli)\n\n    # Competitions list files\n    parser_competitions_files = subparsers_competitions.add_parser(\n        'files',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_competitions_files)\n    parser_competitions_files_optional = parser_competitions_files._action_groups.pop(\n    )\n    parser_competitions_files_optional.add_argument(\n        'competition', nargs='?', default=None, help=Help.param_competition)\n    parser_competitions_files_optional.add_argument(\n        '-c',\n        '--competition',\n        dest='competition_opt',\n        required=False,\n        help=argparse.SUPPRESS)\n    parser_competitions_files_optional.add_argument(\n        '-v',\n        '--csv',\n        dest='csv_display',\n        action='store_true',\n        help=Help.param_csv)\n    parser_competitions_files_optional.add_argument(\n        '-q',\n        '--quiet',\n        dest='quiet',\n        action='store_true',\n        help=Help.param_quiet)\n    parser_competitions_files._action_groups.append(\n        parser_competitions_files_optional)\n    parser_competitions_files.set_defaults(func=api.competition_list_files_cli)\n\n    # Competitions download\n    parser_competitions_download = subparsers_competitions.add_parser(\n        'download',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_competitions_download)\n    parser_competitions_download_optional = parser_competitions_download._action_groups.pop(\n    )\n    parser_competitions_download_optional.add_argument(\n        'competition', nargs='?', default=None, help=Help.param_competition)\n    parser_competitions_download_optional.add_argument(\n        '-c',\n        '--competition',\n        dest='competition_opt',\n        required=False,\n        help=argparse.SUPPRESS)\n    parser_competitions_download_optional.add_argument(\n        '-f',\n        '--file',\n        dest='file_name',\n        required=False,\n        help=Help.param_competition_file)\n    parser_competitions_download_optional.add_argument(\n        '-p',\n        '--path',\n        dest='path',\n        required=False,\n        help=Help.param_downfolder)\n    parser_competitions_download_optional.add_argument(\n        '-w',\n        '--wp',\n        dest='path',\n        action='store_const',\n        const='.',\n        required=False,\n        help=Help.param_wp)\n    parser_competitions_download_optional.add_argument(\n        '-o',\n        '--force',\n        dest='force',\n        action='store_true',\n        help=Help.param_force)\n    parser_competitions_download_optional.add_argument(\n        '-q',\n        '--quiet',\n        dest='quiet',\n        action='store_true',\n        help=Help.param_quiet)\n    parser_competitions_download._action_groups.append(\n        parser_competitions_download_optional)\n    parser_competitions_download.set_defaults(\n        func=api.competition_download_cli)\n\n    # Competitions submit\n    parser_competitions_submit = subparsers_competitions.add_parser(\n        'submit',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_competitions_submit)\n    parser_competitions_submit_optional = parser_competitions_submit._action_groups.pop(\n    )\n    parser_competitions_submit_required = parser_competitions_submit.add_argument_group(\n        'required arguments')\n    parser_competitions_submit_optional.add_argument(\n        'competition', nargs='?', default=None, help=Help.param_competition)\n    parser_competitions_submit_optional.add_argument(\n        '-c',\n        '--competition',\n        dest='competition_opt',\n        required=False,\n        help=argparse.SUPPRESS)\n    parser_competitions_submit_required.add_argument(\n        '-f',\n        '--file',\n        dest='file_name',\n        required=True,\n        help=Help.param_upfile)\n    parser_competitions_submit_required.add_argument(\n        '-m',\n        '--message',\n        dest='message',\n        required=True,\n        help=Help.param_competition_message)\n    parser_competitions_submit_optional.add_argument(\n        '-q',\n        '--quiet',\n        dest='quiet',\n        action='store_true',\n        help=Help.param_quiet)\n    parser_competitions_submit._action_groups.append(\n        parser_competitions_submit_optional)\n    parser_competitions_submit.set_defaults(func=api.competition_submit_cli)\n\n    # Competitions list submissions\n    parser_competitions_submissions = subparsers_competitions.add_parser(\n        'submissions',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_competitions_submissions)\n    parser_competitions_submissions_optional = parser_competitions_submissions._action_groups.pop(\n    )\n    parser_competitions_submissions_optional.add_argument(\n        'competition', nargs='?', default=None, help=Help.param_competition)\n    parser_competitions_submissions_optional.add_argument(\n        '-c',\n        '--competition',\n        dest='competition_opt',\n        required=False,\n        help=argparse.SUPPRESS)\n    parser_competitions_submissions_optional.add_argument(\n        '-v',\n        '--csv',\n        dest='csv_display',\n        action='store_true',\n        help=Help.param_csv)\n    parser_competitions_submissions_optional.add_argument(\n        '-q',\n        '--quiet',\n        dest='quiet',\n        action='store_true',\n        help=Help.param_quiet)\n    parser_competitions_submissions._action_groups.append(\n        parser_competitions_submissions_optional)\n    parser_competitions_submissions.set_defaults(\n        func=api.competition_submissions_cli)\n\n    # Competitions leaderboard\n    parser_competitions_leaderboard = subparsers_competitions.add_parser(\n        'leaderboard',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_competitions_leaderboard)\n    parser_competitions_leaderboard_optional = parser_competitions_leaderboard._action_groups.pop(\n    )\n    parser_competitions_leaderboard_optional.add_argument(\n        'competition', nargs='?', default=None, help=Help.param_competition)\n    parser_competitions_leaderboard_optional.add_argument(\n        '-c',\n        '--competition',\n        dest='competition_opt',\n        required=False,\n        help=argparse.SUPPRESS)\n    parser_competitions_leaderboard_optional.add_argument(\n        '-s',\n        '--show',\n        dest='view',\n        action='store_true',\n        help=Help.param_competition_leaderboard_view)\n    parser_competitions_leaderboard_optional.add_argument(\n        '-d',\n        '--download',\n        dest='download',\n        action='store_true',\n        help=Help.param_competition_leaderboard_download)\n    parser_competitions_leaderboard_optional.add_argument(\n        '-p', '--path', dest='path', help=Help.param_downfolder)\n    parser_competitions_leaderboard_optional.add_argument(\n        '-v',\n        '--csv',\n        dest='csv_display',\n        action='store_true',\n        help=Help.param_csv)\n    parser_competitions_leaderboard_optional.add_argument(\n        '-q',\n        '--quiet',\n        dest='quiet',\n        action='store_true',\n        help=Help.param_quiet)\n    parser_competitions_leaderboard._action_groups.append(\n        parser_competitions_leaderboard_optional)\n    parser_competitions_leaderboard.set_defaults(\n        func=api.competition_leaderboard_cli)\n\n\ndef parse_datasets(subparsers):\n    if six.PY2:\n        parser_datasets = subparsers.add_parser(\n            'datasets',\n            formatter_class=argparse.RawTextHelpFormatter,\n            help=Help.group_datasets)\n    else:\n        parser_datasets = subparsers.add_parser(\n            'datasets',\n            formatter_class=argparse.RawTextHelpFormatter,\n            help=Help.group_datasets,\n            aliases=['d'])\n    subparsers_datasets = parser_datasets.add_subparsers(\n        title='commands', dest='command')\n    subparsers_datasets.required = True\n    subparsers_datasets.choices = Help.datasets_choices\n\n    # Datasets list\n    parser_datasets_list = subparsers_datasets.add_parser(\n        'list',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_datasets_list)\n    parser_datasets_list_optional = parser_datasets_list._action_groups.pop()\n    parser_datasets_list.add_argument(\n        '--sort-by',\n        dest='sort_by',\n        required=False,\n        help=Help.param_dataset_sort_by)\n    parser_datasets_list.add_argument(\n        '--size', dest='size', required=False, help=Help.param_dataset_size)\n    parser_datasets_list.add_argument(\n        '--file-type',\n        dest='file_type',\n        required=False,\n        help=Help.param_dataset_file_type)\n    parser_datasets_list.add_argument(\n        '--license',\n        dest='license_name',\n        required=False,\n        help=Help.param_dataset_license)\n    parser_datasets_list.add_argument(\n        '--tags', dest='tag_ids', required=False, help=Help.param_dataset_tags)\n    parser_datasets_list.add_argument(\n        '-s',\n        '--search',\n        dest='search',\n        required=False,\n        help=Help.param_search)\n    parser_datasets_list.add_argument(\n        '-m', '--mine', dest='mine', action='store_true', help=Help.param_mine)\n    parser_datasets_list.add_argument(\n        '--user', dest='user', required=False, help=Help.param_dataset_user)\n    parser_datasets_list.add_argument(\n        '-p',\n        '--page',\n        dest='page',\n        default=1,\n        required=False,\n        help=Help.param_page)\n    parser_datasets_list.add_argument(\n        '-v',\n        '--csv',\n        dest='csv_display',\n        action='store_true',\n        help=Help.param_csv)\n    parser_datasets_list.add_argument(\n        '--max-size',\n        dest='max_size',\n        required=False,\n        help=Help.param_dataset_maxsize)\n    parser_datasets_list.add_argument(\n        '--min-size',\n        dest='min_size',\n        required=False,\n        help=Help.param_dataset_minsize)\n    parser_datasets_list._action_groups.append(parser_datasets_list_optional)\n    parser_datasets_list.set_defaults(func=api.dataset_list_cli)\n\n    # Datasets file list\n    parser_datasets_files = subparsers_datasets.add_parser(\n        'files',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_datasets_files)\n    parser_datasets_files_optional = parser_datasets_files._action_groups.pop()\n    parser_datasets_files_optional.add_argument(\n        'dataset', nargs='?', default=None, help=Help.param_dataset)\n    parser_datasets_files_optional.add_argument(\n        '-d',\n        '--dataset',\n        dest='dataset_opt',\n        required=False,\n        help=argparse.SUPPRESS)\n    parser_datasets_files_optional.add_argument(\n        '-v',\n        '--csv',\n        dest='csv_display',\n        action='store_true',\n        help=Help.param_csv)\n    parser_datasets_files._action_groups.append(parser_datasets_files_optional)\n    parser_datasets_files.set_defaults(func=api.dataset_list_files_cli)\n\n    # Datasets download\n    parser_datasets_download = subparsers_datasets.add_parser(\n        'download',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_datasets_download)\n    parser_datasets_download_optional = parser_datasets_download._action_groups.pop(\n    )\n    parser_datasets_download_optional.add_argument(\n        'dataset', nargs='?', default=None, help=Help.param_dataset)\n    parser_datasets_download_optional.add_argument(\n        '-d',\n        '--dataset',\n        dest='dataset_opt',\n        required=False,\n        help=argparse.SUPPRESS)\n    parser_datasets_download_optional.add_argument(\n        '-f',\n        '--file',\n        dest='file_name',\n        required=False,\n        help=Help.param_dataset_file)\n    parser_datasets_download_optional.add_argument(\n        '-p',\n        '--path',\n        dest='path',\n        required=False,\n        help=Help.param_downfolder)\n    parser_datasets_download_optional.add_argument(\n        '-w',\n        '--wp',\n        dest='path',\n        action='store_const',\n        const='.',\n        required=False,\n        help=Help.param_wp)\n    parser_datasets_download_optional.add_argument(\n        '--unzip', dest='unzip', action='store_true', help=Help.param_unzip)\n    parser_datasets_download_optional.add_argument(\n        '-o',\n        '--force',\n        dest='force',\n        action='store_true',\n        help=Help.param_force)\n    parser_datasets_download_optional.add_argument(\n        '-q',\n        '--quiet',\n        dest='quiet',\n        action='store_true',\n        help=Help.param_quiet)\n    parser_datasets_download._action_groups.append(\n        parser_datasets_download_optional)\n    parser_datasets_download.set_defaults(func=api.dataset_download_cli)\n\n    # Datasets create\n    parser_datasets_create = subparsers_datasets.add_parser(\n        'create',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_datasets_new)\n    parser_datasets_create_optional = parser_datasets_create._action_groups.pop(\n    )\n    parser_datasets_create_optional.add_argument(\n        '-p',\n        '--path',\n        dest='folder',\n        required=False,\n        help=Help.param_dataset_upfile)\n    parser_datasets_create_optional.add_argument(\n        '-u',\n        '--public',\n        dest='public',\n        action='store_true',\n        help=Help.param_public)\n    parser_datasets_create_optional.add_argument(\n        '-q',\n        '--quiet',\n        dest='quiet',\n        action='store_true',\n        help=Help.param_quiet)\n    parser_datasets_create_optional.add_argument(\n        '-t',\n        '--keep-tabular',\n        dest='convert_to_csv',\n        action='store_false',\n        help=Help.param_keep_tabular)\n    parser_datasets_create_optional.add_argument(\n        '-r',\n        '--dir-mode',\n        dest='dir_mode',\n        choices=['skip', 'zip', 'tar'],\n        default='skip',\n        help=Help.param_dir_mode)\n    parser_datasets_create._action_groups.append(\n        parser_datasets_create_optional)\n    parser_datasets_create.set_defaults(func=api.dataset_create_new_cli)\n\n    # Datasets update\n    parser_datasets_version = subparsers_datasets.add_parser(\n        'version',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_datasets_new_version)\n    parser_datasets_version_optional = parser_datasets_version._action_groups.pop(\n    )\n    parser_datasets_version_required = parser_datasets_version.add_argument_group(\n        'required arguments')\n    parser_datasets_version_required.add_argument(\n        '-m',\n        '--message',\n        dest='version_notes',\n        required=True,\n        help=Help.param_dataset_version_notes)\n    parser_datasets_version_optional.add_argument(\n        '-p',\n        '--path',\n        dest='folder',\n        required=False,\n        help=Help.param_dataset_upfile)\n    parser_datasets_version_optional.add_argument(\n        '-q',\n        '--quiet',\n        dest='quiet',\n        action='store_true',\n        help=Help.param_quiet)\n    parser_datasets_version_optional.add_argument(\n        '-t',\n        '--keep-tabular',\n        dest='convert_to_csv',\n        action='store_false',\n        help=Help.param_keep_tabular)\n    parser_datasets_version_optional.add_argument(\n        '-r',\n        '--dir-mode',\n        dest='dir_mode',\n        choices=['skip', 'zip', 'tar'],\n        default='skip',\n        help=Help.param_dir_mode)\n    parser_datasets_version_optional.add_argument(\n        '-d',\n        '--delete-old-versions',\n        dest='delete_old_versions',\n        action='store_true',\n        help=Help.param_delete_old_version)\n    parser_datasets_version._action_groups.append(\n        parser_datasets_version_optional)\n    parser_datasets_version.set_defaults(func=api.dataset_create_version_cli)\n\n    # Datasets init\n    parser_datasets_init = subparsers_datasets.add_parser(\n        'init',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_datasets_init)\n    parser_datasets_init_optional = parser_datasets_init._action_groups.pop()\n    parser_datasets_init_optional.add_argument(\n        '-p',\n        '--path',\n        dest='folder',\n        required=False,\n        help=Help.param_dataset_upfile)\n    parser_datasets_init._action_groups.append(parser_datasets_init_optional)\n    parser_datasets_init.set_defaults(func=api.dataset_initialize_cli)\n\n    # Datasets metadata\n    parser_datasets_metadata = subparsers_datasets.add_parser(\n        'metadata',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_datasets_metadata)\n    parser_datasets_metadata_optional = parser_datasets_metadata._action_groups.pop(\n    )\n    parser_datasets_metadata_optional.add_argument(\n        'dataset', nargs='?', default=None, help=Help.param_dataset)\n    parser_datasets_metadata_optional.add_argument(\n        '-d',\n        '--dataset',\n        dest='dataset_opt',\n        required=False,\n        help=argparse.SUPPRESS)\n    parser_datasets_metadata_optional.add_argument(\n        '--update',\n        dest='update',\n        action='store_true',\n        help=Help.param_dataset_metadata_update)\n    parser_datasets_metadata_optional.add_argument(\n        '-p', '--path', dest='path', help=Help.param_dataset_metadata_dir)\n    parser_datasets_metadata._action_groups.append(\n        parser_datasets_metadata_optional)\n    parser_datasets_metadata.set_defaults(func=api.dataset_metadata_cli)\n\n    # Datasets status\n    parser_datasets_status = subparsers_datasets.add_parser(\n        'status',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_datasets_status)\n    parser_datasets_status_optional = parser_datasets_status._action_groups.pop(\n    )\n    parser_datasets_status_optional.add_argument(\n        'dataset', nargs='?', default=None, help=Help.param_dataset)\n    parser_datasets_status_optional.add_argument(\n        '-d',\n        '--dataset',\n        dest='dataset_opt',\n        required=False,\n        help=argparse.SUPPRESS)\n    parser_datasets_status._action_groups.append(\n        parser_datasets_status_optional)\n    parser_datasets_status.set_defaults(func=api.dataset_status_cli)\n\n\ndef parse_kernels(subparsers):\n    if six.PY2:\n        parser_kernels = subparsers.add_parser(\n            'kernels',\n            formatter_class=argparse.RawTextHelpFormatter,\n            help=Help.group_kernels)\n    else:\n        parser_kernels = subparsers.add_parser(\n            'kernels',\n            formatter_class=argparse.RawTextHelpFormatter,\n            help=Help.group_kernels,\n            aliases=['k'])\n    subparsers_kernels = parser_kernels.add_subparsers(\n        title='commands', dest='command')\n    subparsers_kernels.required = True\n    subparsers_kernels.choices = Help.kernels_choices\n\n    # Kernels list/search\n    parser_kernels_list = subparsers_kernels.add_parser(\n        'list',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_kernels_list)\n    parser_kernels_list_optional = parser_kernels_list._action_groups.pop()\n    parser_kernels_list_optional.add_argument(\n        '-m', '--mine', dest='mine', action='store_true', help=Help.param_mine)\n    parser_kernels_list_optional.add_argument(\n        '-p', '--page', dest='page', default=1, help=Help.param_page)\n    parser_kernels_list_optional.add_argument(\n        '--page-size', dest='page_size', default=20, help=Help.param_page_size)\n    parser_kernels_list_optional.add_argument(\n        '-s', '--search', dest='search', help=Help.param_search)\n    parser_kernels_list_optional.add_argument(\n        '-v',\n        '--csv',\n        dest='csv_display',\n        action='store_true',\n        help=Help.param_csv)\n    parser_kernels_list_optional.add_argument(\n        '--parent',\n        dest='parent',\n        required=False,\n        help=Help.param_kernel_parent)\n    parser_kernels_list_optional.add_argument(\n        '--competition',\n        dest='competition',\n        required=False,\n        help=Help.param_kernel_competition)\n    parser_kernels_list_optional.add_argument(\n        '--dataset',\n        dest='dataset',\n        required=False,\n        help=Help.param_kernel_dataset)\n    parser_kernels_list_optional.add_argument(\n        '--user', dest='user', required=False, help=Help.param_kernel_user)\n    parser_kernels_list_optional.add_argument(\n        '--language',\n        dest='language',\n        required=False,\n        help=Help.param_kernel_language)\n    parser_kernels_list_optional.add_argument(\n        '--kernel-type',\n        dest='kernel_type',\n        required=False,\n        help=Help.param_kernel_type)\n    parser_kernels_list_optional.add_argument(\n        '--output-type',\n        dest='output_type',\n        required=False,\n        help=Help.param_kernel_output_type)\n    parser_kernels_list_optional.add_argument(\n        '--sort-by',\n        dest='sort_by',\n        required=False,\n        help=Help.param_kernel_sort_by)\n    parser_kernels_list._action_groups.append(parser_kernels_list_optional)\n    parser_kernels_list.set_defaults(func=api.kernels_list_cli)\n\n    # Kernels init\n    parser_kernels_init = subparsers_kernels.add_parser(\n        'init',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_kernels_init)\n    parser_kernels_init_optional = parser_kernels_init._action_groups.pop()\n    parser_kernels_init_optional.add_argument(\n        '-p',\n        '--path',\n        dest='folder',\n        required=False,\n        help=Help.param_kernel_upfile)\n    parser_kernels_init._action_groups.append(parser_kernels_init_optional)\n    parser_kernels_init.set_defaults(func=api.kernels_initialize_cli)\n\n    # Kernels push\n    parser_kernels_push = subparsers_kernels.add_parser(\n        'push',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_kernels_push)\n    parser_kernels_push_optional = parser_kernels_push._action_groups.pop()\n    parser_kernels_push_optional.add_argument(\n        '-p',\n        '--path',\n        dest='folder',\n        required=False,\n        help=Help.param_kernel_upfile)\n    parser_kernels_push._action_groups.append(parser_kernels_push_optional)\n    parser_kernels_push.set_defaults(func=api.kernels_push_cli)\n\n    # Kernels pull\n    parser_kernels_pull = subparsers_kernels.add_parser(\n        'pull',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_kernels_pull)\n    parser_kernels_pull_optional = parser_kernels_pull._action_groups.pop()\n    parser_kernels_pull_optional.add_argument(\n        'kernel', nargs='?', default=None, help=Help.param_kernel)\n    parser_kernels_pull_optional.add_argument(\n        '-k',\n        '--kernel',\n        dest='kernel',\n        required=False,\n        help=argparse.SUPPRESS)\n    parser_kernels_pull_optional.add_argument(\n        '-p',\n        '--path',\n        dest='path',\n        required=False,\n        help=Help.param_downfolder)\n    parser_kernels_pull_optional.add_argument(\n        '-w',\n        '--wp',\n        dest='path',\n        action='store_const',\n        const='.',\n        required=False,\n        help=Help.param_wp)\n    parser_kernels_pull_optional.add_argument(\n        '-m',\n        '--metadata',\n        dest='metadata',\n        action='store_true',\n        help=Help.param_kernel_pull_metadata)\n    parser_kernels_pull._action_groups.append(parser_kernels_pull_optional)\n    parser_kernels_pull.set_defaults(func=api.kernels_pull_cli)\n\n    # Kernels output\n    parser_kernels_output = subparsers_kernels.add_parser(\n        'output',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_kernels_output)\n    parser_kernels_output_optional = parser_kernels_output._action_groups.pop()\n    parser_kernels_output_optional.add_argument(\n        'kernel', nargs='?', default=None, help=Help.param_kernel)\n    parser_kernels_output_optional.add_argument(\n        '-k',\n        '--kernel',\n        dest='kernel_opt',\n        required=False,\n        help=argparse.SUPPRESS)\n    parser_kernels_output_optional.add_argument(\n        '-p',\n        '--path',\n        dest='path',\n        required=False,\n        help=Help.param_downfolder)\n    parser_kernels_output_optional.add_argument(\n        '-w',\n        '--wp',\n        dest='path',\n        action='store_const',\n        const='.',\n        required=False,\n        help=Help.param_wp)\n    parser_kernels_output_optional.add_argument(\n        '-o',\n        '--force',\n        dest='force',\n        action='store_true',\n        required=False,\n        help=Help.param_force)\n    parser_kernels_output_optional.add_argument(\n        '-q',\n        '--quiet',\n        dest='quiet',\n        action='store_true',\n        required=False,\n        help=Help.param_quiet)\n    parser_kernels_output._action_groups.append(parser_kernels_output_optional)\n    parser_kernels_output.set_defaults(func=api.kernels_output_cli)\n\n    # Kernels status\n    parser_kernels_status = subparsers_kernels.add_parser(\n        'status',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_kernels_status)\n    parser_kernels_status_optional = parser_kernels_status._action_groups.pop()\n    parser_kernels_status_optional.add_argument(\n        'kernel', nargs='?', default=None, help=Help.param_kernel)\n    parser_kernels_status_optional.add_argument(\n        '-k',\n        '--kernel',\n        dest='kernel_opt',\n        required=False,\n        help=argparse.SUPPRESS)\n    parser_kernels_status._action_groups.append(parser_kernels_status_optional)\n    parser_kernels_status.set_defaults(func=api.kernels_status_cli)\n\n\ndef parse_models(subparsers):\n    parser_models = subparsers.add_parser(\n        'models',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.group_models,\n        aliases=['m'])\n\n    subparsers_models = parser_models.add_subparsers(\n        title='commands', dest='command')\n    subparsers_models.required = True\n    subparsers_models.choices = Help.models_choices\n\n    # Models Instances.\n    parse_model_instances(subparsers_models)\n\n    # Models get\n    parser_models_get = subparsers_models.add_parser(\n        'get',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_models_get)\n    parser_models_get_optional = parser_models_get._action_groups.pop()\n    parser_models_get_optional.add_argument('model', help=Help.param_model)\n    parser_models_get_optional.add_argument(\n        '-p',\n        '--path',\n        dest='folder',\n        required=False,\n        help=Help.param_model_downfile)\n    parser_models_get._action_groups.append(parser_models_get_optional)\n    parser_models_get.set_defaults(func=api.model_get_cli)\n\n    # Models list\n    parser_models_list = subparsers_models.add_parser(\n        'list',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_models_list)\n    parser_models_list_optional = parser_models_list._action_groups.pop()\n    parser_models_list.add_argument(\n        '--sort-by',\n        dest='sort_by',\n        required=False,\n        help=Help.param_model_sort_by)\n    parser_models_list.add_argument(\n        '-s',\n        '--search',\n        dest='search',\n        required=False,\n        help=Help.param_search)\n    parser_models_list.add_argument(\n        '--owner', dest='owner', required=False, help=Help.param_model_owner)\n    parser_models_list.add_argument(\n        '--page-size', dest='page_size', default=20, help=Help.param_page_size)\n    parser_models_list.add_argument(\n        '--page-token',\n        dest='page_token',\n        required=False,\n        help=Help.param_page_token)\n    parser_models_list.add_argument(\n        '-v',\n        '--csv',\n        dest='csv_display',\n        action='store_true',\n        help=Help.param_csv)\n    parser_models_list._action_groups.append(parser_models_list_optional)\n    parser_models_list.set_defaults(func=api.model_list_cli)\n\n    # Models init\n    parser_models_init = subparsers_models.add_parser(\n        'init',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_models_init)\n    parser_models_init_optional = parser_models_init._action_groups.pop()\n    parser_models_init_optional.add_argument(\n        '-p',\n        '--path',\n        dest='folder',\n        required=False,\n        help=Help.param_model_upfile)\n    parser_models_init._action_groups.append(parser_models_init_optional)\n    parser_models_init.set_defaults(func=api.model_initialize_cli)\n\n    # Models create\n    parser_models_create = subparsers_models.add_parser(\n        'create',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_models_new)\n    parser_models_create_optional = parser_models_create._action_groups.pop()\n    parser_models_create_optional.add_argument(\n        '-p',\n        '--path',\n        dest='folder',\n        required=False,\n        help=Help.param_model_upfile)\n    parser_models_create._action_groups.append(parser_models_create_optional)\n    parser_models_create.set_defaults(func=api.model_create_new_cli)\n\n    # Models delete\n    parser_models_delete = subparsers_models.add_parser(\n        'delete',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_models_delete)\n    parser_models_delete_optional = parser_models_delete._action_groups.pop()\n    parser_models_delete_optional.add_argument('model', help=Help.param_model)\n    parser_models_delete_optional.add_argument(\n        '-y', '--yes', dest='yes', action='store_true', help=Help.param_yes)\n    parser_models_delete._action_groups.append(parser_models_delete_optional)\n    parser_models_delete.set_defaults(func=api.model_delete_cli)\n\n    # Models update\n    parser_models_update = subparsers_models.add_parser(\n        'update',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_models_update)\n    parser_models_update_optional = parser_models_update._action_groups.pop()\n    parser_models_update_optional.add_argument(\n        '-p',\n        '--path',\n        dest='folder',\n        required=False,\n        help=Help.param_model_upfile)\n    parser_models_update._action_groups.append(parser_models_update_optional)\n    parser_models_update.set_defaults(func=api.model_update_cli)\n\n\ndef parse_model_instances(subparsers):\n    parser_model_instances = subparsers.add_parser(\n        'instances',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.group_model_instances,\n        aliases=['mi'])\n\n    subparsers_model_instances = parser_model_instances.add_subparsers(\n        title='commands', dest='command')\n    subparsers_model_instances.required = True\n    subparsers_model_instances.choices = Help.model_instances_choices\n\n    # Models Instances Versions.\n    parse_model_instance_versions(subparsers_model_instances)\n\n    # Models Instances get\n    parser_model_instance_get = subparsers_model_instances.add_parser(\n        'get',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_model_instances_get)\n    parser_model_instance_get_optional = parser_model_instance_get._action_groups.pop(\n    )\n    parser_model_instance_get_optional.add_argument(\n        'model_instance', help=Help.param_model_instance)\n    parser_model_instance_get_optional.add_argument(\n        '-p',\n        '--path',\n        dest='folder',\n        required=False,\n        help=Help.param_model_instance_downfile)\n    parser_model_instance_get._action_groups.append(\n        parser_model_instance_get_optional)\n    parser_model_instance_get.set_defaults(func=api.model_instance_get_cli)\n\n    # Model Instances init\n    parser_model_instances_init = subparsers_model_instances.add_parser(\n        'init',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_model_instances_init)\n    parser_model_instances_init_optional = parser_model_instances_init._action_groups.pop(\n    )\n    parser_model_instances_init_optional.add_argument(\n        '-p',\n        '--path',\n        dest='folder',\n        required=False,\n        help=Help.param_model_instance_upfile)\n    parser_model_instances_init._action_groups.append(\n        parser_model_instances_init_optional)\n    parser_model_instances_init.set_defaults(\n        func=api.model_instance_initialize_cli)\n\n    # Model Instances create\n    parser_model_instances_create = subparsers_model_instances.add_parser(\n        'create',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_model_instances_new)\n    parser_model_instances_create_optional = parser_model_instances_create._action_groups.pop(\n    )\n    parser_model_instances_create_optional.add_argument(\n        '-p',\n        '--path',\n        dest='folder',\n        required=False,\n        help=Help.param_model_instance_upfile)\n    parser_model_instances_create_optional.add_argument(\n        '-q',\n        '--quiet',\n        dest='quiet',\n        action='store_true',\n        help=Help.param_quiet)\n    parser_model_instances_create_optional.add_argument(\n        '-r',\n        '--dir-mode',\n        dest='dir_mode',\n        choices=['skip', 'zip', 'tar'],\n        default='skip',\n        help=Help.param_dir_mode)\n    parser_model_instances_create._action_groups.append(\n        parser_model_instances_create_optional)\n    parser_model_instances_create.set_defaults(\n        func=api.model_instance_create_cli)\n\n    # Models Instances delete\n    parser_model_instances_delete = subparsers_model_instances.add_parser(\n        'delete',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_model_instances_delete)\n    parser_model_instances_delete_optional = parser_model_instances_delete._action_groups.pop(\n    )\n    parser_model_instances_delete_optional.add_argument(\n        'model_instance', help=Help.param_model_instance)\n    parser_model_instances_delete_optional.add_argument(\n        '-y', '--yes', dest='yes', action='store_true', help=Help.param_yes)\n    parser_model_instances_delete._action_groups.append(\n        parser_model_instances_delete_optional)\n    parser_model_instances_delete.set_defaults(\n        func=api.model_instance_delete_cli)\n\n    # Models Instances update\n    parser_model_instances_update = subparsers_model_instances.add_parser(\n        'update',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_model_instances_update)\n    parser_model_instances_update_optional = parser_model_instances_update._action_groups.pop(\n    )\n    parser_model_instances_update_optional.add_argument(\n        '-p',\n        '--path',\n        dest='folder',\n        required=False,\n        help=Help.param_model_instance_upfile)\n    parser_model_instances_update._action_groups.append(\n        parser_model_instances_update_optional)\n    parser_model_instances_update.set_defaults(\n        func=api.model_instance_update_cli)\n\n\ndef parse_model_instance_versions(subparsers):\n    parser_model_instance_versions = subparsers.add_parser(\n        'versions',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.group_model_instance_versions,\n        aliases=['miv'])\n\n    subparsers_model_intance_versions = parser_model_instance_versions.add_subparsers(\n        title='commands', dest='command')\n    subparsers_model_intance_versions.required = True\n    subparsers_model_intance_versions.choices = Help.model_instance_versions_choices\n\n    # Model Instance Versions create\n    parser_model_instance_versions_create = subparsers_model_intance_versions.add_parser(\n        'create',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_model_instance_versions_new)\n    parser_model_instance_versions_create_optional = parser_model_instance_versions_create._action_groups.pop(\n    )\n    parser_model_instance_versions_create_optional.add_argument(\n        'model_instance', help=Help.param_model_instance)\n    parser_model_instance_versions_create_optional.add_argument(\n        '-p',\n        '--path',\n        dest='folder',\n        required=False,\n        help=Help.param_model_instance_version_upfile)\n    parser_model_instance_versions_create_optional.add_argument(\n        '-n',\n        '--version-notes',\n        dest='version_notes',\n        required=False,\n        help=Help.param_model_instance_version_upfile)\n    parser_model_instance_versions_create_optional.add_argument(\n        '-q',\n        '--quiet',\n        dest='quiet',\n        action='store_true',\n        help=Help.param_quiet)\n    parser_model_instance_versions_create_optional.add_argument(\n        '-r',\n        '--dir-mode',\n        dest='dir_mode',\n        choices=['skip', 'zip', 'tar'],\n        default='skip',\n        help=Help.param_dir_mode)\n    parser_model_instance_versions_create._action_groups.append(\n        parser_model_instance_versions_create_optional)\n    parser_model_instance_versions_create.set_defaults(\n        func=api.model_instance_version_create_cli)\n\n    # Models Instance Versions download\n    parser_model_instance_versions_download = subparsers_model_intance_versions.add_parser(\n        'download',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_model_instance_versions_download)\n    parser_model_instance_versions_download_optional = parser_model_instance_versions_download._action_groups.pop(\n    )\n    parser_model_instance_versions_download_optional.add_argument(\n        'model_instance_version', help=Help.param_model_instance_version)\n    parser_model_instance_versions_download_optional.add_argument(\n        '-p',\n        '--path',\n        dest='path',\n        required=False,\n        help=Help.param_downfolder)\n    parser_model_instance_versions_download_optional.add_argument(\n        '--untar', dest='untar', action='store_true', help=Help.param_untar)\n    parser_model_instance_versions_download_optional.add_argument(\n        '-f',\n        '--force',\n        dest='force',\n        action='store_true',\n        help=Help.param_force)\n    parser_model_instance_versions_download_optional.add_argument(\n        '-q',\n        '--quiet',\n        dest='quiet',\n        action='store_true',\n        help=Help.param_quiet)\n    parser_model_instance_versions_download._action_groups.append(\n        parser_model_instance_versions_download_optional)\n    parser_model_instance_versions_download.set_defaults(\n        func=api.model_instance_version_download_cli)\n\n    # Models Instance Versions delete\n    parser_model_instance_versions_delete = subparsers_model_intance_versions.add_parser(\n        'delete',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_model_instance_versions_delete)\n    parser_model_instance_versions_delete_optional = parser_model_instance_versions_delete._action_groups.pop(\n    )\n    parser_model_instance_versions_delete_optional.add_argument(\n        'model_instance_version', help=Help.param_model_instance_version)\n    parser_model_instance_versions_delete_optional.add_argument(\n        '-y', '--yes', dest='yes', action='store_true', help=Help.param_yes)\n    parser_model_instance_versions_delete._action_groups.append(\n        parser_model_instance_versions_delete_optional)\n    parser_model_instance_versions_delete.set_defaults(\n        func=api.model_instance_version_delete_cli)\n\n\ndef parse_files(subparsers):\n    parser_files = subparsers.add_parser(\n        'files',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.group_files,\n        aliases=['f'])\n\n    subparsers_files = parser_files.add_subparsers(\n        title='commands', dest='command')\n    subparsers_files.required = True\n    subparsers_files.choices = Help.files_choices\n\n    # Files upload\n    parser_files_upload = subparsers_files.add_parser(\n        'upload',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_files_upload,\n        aliases=['u'])\n    parser_files_upload_optional = parser_files_upload._action_groups.pop()\n    parser_files_upload_optional.add_argument(\n        '-i',\n        '--inbox-path',\n        dest='inbox_path',\n        required=False,\n        default='',\n        help=Help.param_files_upload_inbox_path)\n    parser_files_upload_optional.add_argument(\n        'local_paths',\n        metavar='local-path',\n        nargs='+',\n        help=Help.param_files_upload_local_paths)\n    parser_files_upload_optional.add_argument(\n        '--no-resume',\n        dest='no_resume',\n        action='store_true',\n        required=False,\n        default=False,\n        help=Help.param_files_upload_no_resume)\n    parser_files_upload_optional.add_argument(\n        '--no-compress',\n        dest='no_compress',\n        action='store_true',\n        required=False,\n        default=False,\n        help=Help.param_files_upload_no_compress)\n    parser_files_upload._action_groups.append(parser_files_upload_optional)\n    parser_files_upload.set_defaults(func=api.files_upload_cli)\n\n\ndef parse_config(subparsers):\n    parser_config = subparsers.add_parser(\n        'config',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.group_config)\n    subparsers_config = parser_config.add_subparsers(\n        title='commands', dest='command')\n    subparsers_config.required = True\n    subparsers_config.choices = Help.config_choices\n\n    parser_config_view = subparsers_config.add_parser(\n        'view',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_config_view)\n    parser_config_view.set_defaults(func=api.print_config_values)\n\n    parser_config_set = subparsers_config.add_parser(\n        'set',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_config_set)\n    parser_config_set._action_groups.pop()\n    parser_config_set_required = parser_config_set.add_argument_group(\n        'required arguments')\n    parser_config_set_required.add_argument(\n        '-n',\n        '--name',\n        dest='name',\n        required=True,\n        help=Help.param_config_name)\n    parser_config_set_required.add_argument(\n        '-v',\n        '--value',\n        dest='value',\n        required=True,\n        help=Help.param_config_value)\n    parser_config_set.set_defaults(func=api.set_config_value)\n\n    parser_config_unset = subparsers_config.add_parser(\n        'unset',\n        formatter_class=argparse.RawTextHelpFormatter,\n        help=Help.command_config_unset)\n    parser_config_unset._action_groups.pop()\n    parser_config_unset_required = parser_config_unset.add_argument_group(\n        'required arguments')\n    parser_config_unset_required.add_argument(\n        '-n',\n        '--name',\n        dest='name',\n        required=True,\n        help=Help.param_config_name)\n    parser_config_unset.set_defaults(func=api.unset_config_value)\n\n\nclass Help(object):\n    kaggle_choices = [\n        'competitions', 'c', 'datasets', 'd', 'kernels', 'k', 'models', 'm',\n        'files', 'f', 'config'\n    ]\n    competitions_choices = [\n        'list', 'files', 'download', 'submit', 'submissions', 'leaderboard'\n    ]\n    datasets_choices = [\n        'list', 'files', 'download', 'create', 'version', 'init', 'metadata',\n        'status'\n    ]\n    kernels_choices = ['list', 'init', 'push', 'pull', 'output', 'status']\n    models_choices = [\n        'instances', 'get', 'list', 'init', 'create', 'delete', 'update'\n    ]\n    model_instances_choices = [\n        'versions', 'get', 'init', 'create', 'delete', 'update'\n    ]\n    model_instance_versions_choices = ['init', 'create', 'download', 'delete']\n    files_choices = ['upload']\n    config_choices = ['view', 'set', 'unset']\n\n    kaggle = 'Use one of:\\ncompetitions {' + ', '.join(\n        competitions_choices) + '}\\ndatasets {' + ', '.join(\n            datasets_choices) + '}\\nkernels {' + ', '.join(\n                kernels_choices) + '}\\nconfig {' + ', '.join(\n                    config_choices) + '}'\n\n    group_competitions = 'Commands related to Kaggle competitions'\n    group_datasets = 'Commands related to Kaggle datasets'\n    group_kernels = 'Commands related to Kaggle kernels'\n    group_models = 'Commands related to Kaggle models'\n    group_model_instances = 'Commands related to Kaggle model instances'\n    group_model_instance_versions = 'Commands related to Kaggle model instance versions'\n    group_files = 'Commands related files'\n    group_config = 'Configuration settings'\n\n    # Competitions commands\n    command_competitions_list = 'List available competitions'\n    command_competitions_files = 'List competition files'\n    command_competitions_download = 'Download competition files'\n    command_competitions_submit = 'Make a new competition submission'\n    command_competitions_submissions = 'Show your competition submissions'\n    command_competitions_leaderboard = 'Get competition leaderboard information'\n\n    # Datasets commands\n    command_datasets_list = 'List available datasets'\n    command_datasets_files = 'List dataset files'\n    command_datasets_download = 'Download dataset files'\n    command_datasets_new = 'Create a new dataset'\n    command_datasets_new_version = 'Create a new dataset version'\n    command_datasets_init = 'Initialize metadata file for dataset creation'\n    command_datasets_metadata = 'Download metadata about a dataset'\n    command_datasets_status = 'Get the creation status for a dataset'\n\n    # Kernels commands\n    command_kernels_list = (\n        'List available kernels. By default, shows 20 results sorted by '\n        'hotness')\n    command_kernels_init = 'Initialize metadata file for a kernel'\n    command_kernels_push = 'Push new code to a kernel and run the kernel'\n    command_kernels_pull = 'Pull down code from a kernel'\n    command_kernels_output = 'Get data output from the latest kernel run'\n    command_kernels_status = 'Display the status of the latest kernel run'\n\n    # Models commands\n    command_models_get = 'Get a model'\n    command_models_list = 'List models'\n    command_models_init = 'Initialize metadata file for model creation'\n    command_models_new = 'Create a new model'\n    command_models_delete = 'Delete a model'\n    command_models_update = 'Update a model'\n\n    # Files commands\n    command_files_upload = 'Upload files'\n\n    # Config commands\n    command_config_path = (\n        'Set folder where competition or dataset files will be '\n        'downloaded')\n    command_config_proxy = 'Set proxy server'\n    command_config_competition = 'Set default competition'\n    command_config_view = 'View current config values'\n    command_config_set = 'Set a configuration value'\n    command_config_unset = 'Clear a configuration value'\n\n    # General params\n    param_downfolder = (\n        'Folder where file(s) will be downloaded, defaults to current working '\n        'directory')\n    param_wp = 'Download files to current working path'\n    param_proxy = 'Proxy for HTTP requests'\n    param_quiet = (\n        'Suppress printing information about the upload/download progress')\n    param_public = 'Create publicly (default is private)'\n    param_keep_tabular = (\n        'Do not convert tabular files to CSV (default is to convert)')\n    param_dir_mode = (\n        'What to do with directories: \"skip\" - ignore; \"zip\" - compressed upload; \"tar\" - '\n        'uncompressed upload')\n    param_delete_old_version = 'Delete old versions of this dataset'\n    param_force = (\n        'Skip check whether local version of file is up to date, force'\n        ' file download')\n    param_upfile = 'File for upload (full path)'\n    param_csv = 'Print results in CSV format (if not set print in table format)'\n    param_page = 'Page number for results paging. Page size is 20 by default'\n    param_page_size = (\n        'Number of items to show on a page. Default size is 20, '\n        'max is 100')\n    param_page_token = 'Page token for results paging.'\n    param_search = 'Term(s) to search for'\n    param_mine = 'Display only my items'\n    param_unzip = (\n        'Unzip the downloaded file. Will delete the zip file when completed.')\n    param_untar = (\n        'Untar the downloaded file. Will delete the tar file when completed.')\n    param_yes = (\n        'Sets any confirmation values to \"yes\" automatically. Users will not be asked to confirm.'\n    )\n\n    # Competitions params\n    param_competition = (\n        'Competition URL suffix (use \"kaggle competitions list\" '\n        'to show options)\\nIf empty, the default competition '\n        'will be used (use \"kaggle config set competition\")\"')\n    param_competition_nonempty = (\n        'Competition URL suffix (use \"kaggle competitions list\" to show '\n        'options)')\n    param_competition_leaderboard_view = 'Show the top of the leaderboard'\n    param_competition_leaderboard_download = 'Download entire leaderboard'\n    param_competition_file = (\n        'File name, all files downloaded if not provided\\n(use \"kaggle '\n        'competitions files -c <competition>\" to show options)')\n    param_competition_message = 'Message describing this submission'\n    param_competition_group = (\n        'Search for competitions in a specific group. Default is \\'general\\'. '\n        'Valid options are \\'general\\', \\'entered\\', and \\'inClass\\'')\n    param_competition_category = (\n        'Search for competitions of a specific category. Default is \\'all\\'. '\n        'Valid options are \\'all\\', \\'featured\\', \\'research\\', '\n        '\\'recruitment\\', \\'gettingStarted\\', \\'masters\\', and \\'playground\\'')\n    param_competition_sort_by = (\n        'Sort list results. Default is \\'latestDeadline\\'. Valid options are '\n        '\\'grouped\\', \\'prize\\', \\'earliestDeadline\\', \\'latestDeadline\\', '\n        '\\'numberOfTeams\\', and \\'recentlyCreated\\'')\n\n    # Datasets params\n    param_dataset = (\n        'Dataset URL suffix in format <owner>/<dataset-name> (use '\n        '\"kaggle datasets list\" to show options)')\n    param_dataset_file = (\n        'File name, all files downloaded if not provided\\n(use '\n        '\"kaggle datasets files -d <dataset>\" to show options)')\n    param_dataset_version_notes = 'Message describing the new version'\n    param_dataset_upfile = (\n        'Folder for upload, containing data files and a '\n        'special datasets-metadata.json file '\n        '(https://github.com/Kaggle/kaggle-api/wiki/Dataset-Metadata). '\n        'Defaults to current working directory')\n    param_dataset_sort_by = (\n        'Sort list results. Default is \\'hottest\\'. Valid options are '\n        '\\'hottest\\', \\'votes\\', \\'updated\\', and \\'active\\'')\n    param_dataset_size = (\n        'DEPRECATED. Please use --max-size and --min-size to filter dataset sizes.'\n    )\n    param_dataset_file_type = (\n        'Search for datasets with a specific file type. Default is \\'all\\'. '\n        'Valid options are \\'all\\', \\'csv\\', \\'sqlite\\', \\'json\\', and '\n        '\\'bigQuery\\'. Please note that bigQuery datasets cannot be downloaded'\n    )\n    param_dataset_license = (\n        'Search for datasets with a specific license. Default is \\'all\\'. '\n        'Valid options are \\'all\\', \\'cc\\', \\'gpl\\', \\'odb\\', and \\'other\\'')\n    param_dataset_tags = (\n        'Search for datasets that have specific tags. Tag list should be '\n        'comma separated')\n    param_dataset_user = (\n        'Find public datasets owned by a specific user or organization')\n    param_dataset_metadata_dir = (\n        'Location to download dataset metadata to. Defaults to current working '\n        'directory')\n    param_dataset_metadata_update = ('A flag to indicate whether the dataset'\n                                     'metadata should be updated.')\n    param_dataset_maxsize = 'Specify the maximum size of the dataset to return (bytes)'\n    param_dataset_minsize = 'Specify the minimum size of the dataset to return (bytes)'\n\n    # Kernels params\n    param_kernel = (\n        'Kernel URL suffix in format <owner>/<kernel-name> (use \"kaggle '\n        'kernels list\" to show options)')\n    param_kernel_init = (\n        'Create a metadata file for an existing kernel URL suffix in format '\n        '<owner>/<kernel-name> (use \"kaggle kernels list\" to show options)')\n    param_kernel_upfile = (\n        'Folder for upload, containing data files and a '\n        'special kernel-metadata.json file '\n        '(https://github.com/Kaggle/kaggle-api/wiki/Kernel-Metadata). '\n        'Defaults to current working directory')\n    param_kernel_parent = 'Find children of the specified parent kernel'\n    param_kernel_competition = 'Find kernels for a given competition slug'\n    param_kernel_dataset = ('Find kernels for a given dataset slug. Format is '\n                            '{username/dataset-slug}')\n    param_kernel_user = 'Find kernels created by a given username'\n    # TODO(b/129357583): Pull these from the same spot as the api impl\n    param_kernel_language = (\n        'Specify the language the kernel is written in. Default is \\'all\\'. '\n        'Valid options are \\'all\\', \\'python\\', \\'r\\', \\'sqlite\\', and '\n        '\\'julia\\'')\n    param_kernel_type = (\n        'Specify the type of kernel. Default is \\'all\\'. Valid '\n        'options are \\'all\\', \\'script\\', and \\'notebook\\'')\n    param_kernel_output_type = (\n        'Search for specific kernel output types. '\n        'Default is \\'all\\'.  Valid options are \\'all\\', '\n        '\\'visualizations\\', and \\'data\\'')\n    param_kernel_sort_by = (\n        'Sort list results. Default is \\'hotness\\'. Valid '\n        'options are \\'hotness\\', \\'commentCount\\', '\n        '\\'dateCreated\\', \\'dateRun\\', \\'relevance\\', '\n        '\\'scoreAscending\\', \\'scoreDescending\\', '\n        '\\'viewCount\\', and \\'voteCount\\'. \\'relevance\\' '\n        'is only applicable if a search term is specified.')\n    param_kernel_pull_metadata = 'Generate metadata when pulling kernel'\n\n    # Models params\n    param_model = ('Model URL suffix in format <owner>/<model-name>')\n    param_model_sort_by = (\n        'Sort list results. Default is \\'hotness\\'. Valid options are '\n        '\\'hotness\\', \\'downloadCount\\', \\'voteCount\\', \\'notebookCount\\' and \\'createTime\\''\n    )\n    param_model_owner = (\n        'Find public models owned by a specific user or organization')\n    param_model_downfile = (\n        'Folder containing the special model-metadata.json file '\n        '(https://github.com/Kaggle/kaggle-api/wiki/Model-Metadata).')\n    param_model_upfile = (\n        'Folder containing the special model-metadata.json file '\n        '(https://github.com/Kaggle/kaggle-api/wiki/Model-Metadata). '\n        'Defaults to current working directory')\n\n    # Model Instances params\n    param_model_instance = (\n        'Model Instance URL suffix in format <owner>/<model-name>/<framework>/<instance-slug>'\n    )\n    command_model_instances_get = 'Get a model instance'\n    command_model_instances_init = 'Initialize metadata file for model instance creation'\n    command_model_instances_new = 'Create a new model instance'\n    param_model_instance_downfile = (\n        'Folder for downloading the special model-instance-metadata.json file '\n        '(https://github.com/Kaggle/kaggle-api/wiki/ModelInstance-Metadata). ')\n    param_model_instance_upfile = (\n        'Folder for upload, containing data files and a '\n        'special model-instance-metadata.json file '\n        '(https://github.com/Kaggle/kaggle-api/wiki/ModelInstance-Metadata). '\n        'Defaults to current working directory')\n    command_model_instances_delete = 'Delete a model instance'\n    command_model_instances_update = 'Update a model instance'\n\n    # Model Instance Versions params\n    param_model_instance_version = (\n        'Model Instance Version URL suffix in format <owner>/<model-name>/<framework>/<instance-slug>/<version-number>'\n    )\n\n    # Model Instance Versions params\n    command_model_instance_versions_new = 'Create a new model instance version'\n    param_model_instance_version_upfile = (\n        'Folder for upload, containing data files and a '\n        'special model-instance_version-metadata.json file '\n        '(https://github.com/Kaggle/kaggle-api/wiki/ModelInstanceVersion-Metadata). '\n        'Defaults to current working directory')\n    command_model_instance_versions_delete = 'Delete a model instance version'\n    command_model_instance_versions_download = 'Download model instance version files'\n    param_model_instance_version_notes = 'Version notes to record for the new model instance version'\n\n    # Files params\n    param_files_upload_inbox_path = 'Virtual path on the server where the uploaded files will be stored'\n    param_files_upload_local_paths = (\n        'List of local filesystem paths. Each path creates a separate file on the server. '\n        'Directories are uploaded as zip archives by default (e.g., a directory called '\n        '\"data\" will be uploaded as \"data.zip\")')\n    param_files_upload_no_compress = 'Whether to compress directories (zip) or not (tar)'\n    param_files_upload_no_resume = 'Whether to skip resumable uploads.'\n\n    # Config params\n    param_config_name = ('Name of the configuration parameter\\n(one of '\n                         'competition, path, proxy)')\n    param_config_value = (\n        ('Value of the configuration parameter, valid values '\n         'depending on name\\n- competition: ') + param_competition_nonempty +\n        '\\n- path: ' + param_downfolder + '\\n- proxy: ' + param_proxy)","metadata":{"_uuid":"ddbab3ae-9c37-44c9-a3ad-1111a1185afd","_cell_guid":"099b2ce2-de62-4ac7-a75c-e18ef398590b","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}